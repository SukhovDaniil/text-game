@startuml

package integration {

    enum Messagers {
        GAME_CONTROLLER
        USER
        PERSON
    }

    interface MessageDelivery {
        + sendMessage(Message message)
        + addListener(Listener<Message> listener)
    }

    interface Listener<I> {
        public onMessage(I message)
    }

    abstract class AbstractMessageDelivery {
        - List<MessageListener> listeners
    }
    MessageDelivery <|-- AbstractMessageDelivery
    AbstractMessageDelivery o-- Listener

    class Message {
        - Messagers from
        - Messagers to
        - String message

        + boolean to(Messagers messager)
        + boolean from(Messagers messager)
        + String getMessage()
    }
}

package game {
    class GameController {
        - MessageDelivery messageDelivery

        - newGame()
        - stopGame()
    }
    GameController o-- MessageDelivery

    package word{

        interface Person {

        }

        interface Position {

        }

        interface Word {
            + Position getPosition(Person person)
            + Word getState()
        }

        package impl {

            class PersonImpl {

            }
            Person <|-- PersonImpl

            class PositionImpl {

            }
            Position <|-- PositionImpl

            class WordImpl {

            }
            Word <|-- WordImpl

            class WordStateImpl {

            }
            Word <|-- WordStateImpl
        }
    }

    package npc {

        interface Npc {
            + speak()
        }

        abstract class AbstractSeller {

        }
        Npc <|-- AbstractSeller

        class Seller {

        }
        AbstractSeller <|-- Seller

        abstract class AbstractWarrior {

        }
        Npc <|-- AbstractWarrior

        class Warrior {

        }
        AbstractWarrior <|-- Warrior

    }

}

package telegram {
    class TelegramMessageDelivery {
        - TelegramBot telegramBor
    }
    MessageDelivery <|-- TelegramMessageDelivery
}

@enduml